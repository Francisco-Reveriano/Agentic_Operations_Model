import os
import asyncio
from agents import Agent, Runner, WebSearchTool, RunConfig, set_default_openai_client, HostedMCPTool
from agents.model_settings import ModelSettings
from openai import OpenAI, AsyncOpenAI
from pydantic import BaseModel
from typing import List, Optional, Union
from agents.tool import function_tool


@function_tool
async def query_openai_deep_research(user_input: str, model: str = "o3-deep-research") -> str:
    """
    Queries OpenAI's API for deep research based on a user-provided topic. The
    function applies advanced research capabilities to generate analytical,
    data-backed insights suitable for applications such as financial modeling
    or investment strategies. It includes specific figures, statistics, and
    relevant citations, prioritizing reliable, up-to-date sources.

    The function uses the OpenAI API with a specified model and designated tool
    setup. It sends a detailed prompt to the model containing research
    instructions, aiming to achieve a comprehensive, well-supported output.

    :param user_input: The research topic or query that the function should focus
        on. The input must be precise and adequately detailed to elicit quality
        results from the research algorithm.
    :type user_input: str
    :param model: The OpenAI model identifier used for this query. By default,
        the model is set to "o3-deep-research" for in-depth research capabilities.
        This parameter can be modified to use other available model versions.
    :type model: str
    :return: A string containing the research output generated by the OpenAI
        model. The content includes analytical reasoning, well-supported findings,
        inline citations, and metadata from reliable sources.
    :rtype: str
    """
    client = AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"), base_url=os.getenv("OPENAI_BASE_URL"), timeout=10000)

    input_text = """
    Research the following user topic: {}.
    Do:
    - Include specific figures, trends, statistics, and measurable outcomes.
    - Prioritize reliable, up-to-date sources: peer-reviewed research, health
      organizations (e.g., WHO, CDC), regulatory agencies, or pharmaceutical
      earnings reports.
    - Include inline citations and return all source metadata.

    Be analytical, avoid generalities, and ensure that each section supports
    data-backed reasoning that could inform investment strategy, financial modeling, and financial research.
    """.format(user_input)

    response = await client.responses.create(
        model=os.getenv("OPENAI_DEEP_RESEARCH_MODEL"),
        input=input_text,
        tools=[
            {"type": "web_search_preview"},
        ],
    )

    return response.output_text

# 3. Create Instruction Prompt
OpenAI_Deep_Research_Prompt = "You perform deep empirical research based on the user's question."

# 4. Create your Agent with the wrapped tool
OpenAIDeepResearch_Tool = Agent(
    name="OpenAIDeepResearch_Tool",
    instructions=OpenAI_Deep_Research_Prompt,
    tools=[query_openai_deep_research],
)